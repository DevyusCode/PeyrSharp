import{_ as s,o as a,c as n,Q as e}from"./chunks/framework.b40c9ff3.js";const u=JSON.parse('{"title":"Enumerations","description":"","frontmatter":{},"headers":[],"relativePath":"enumerations.md","filePath":"enumerations.md","lastUpdated":1680429306000}'),o={name:"enumerations.md"},l=e(`<h1 id="enumerations" tabindex="-1">Enumerations <a class="header-anchor" href="#enumerations" aria-label="Permalink to &quot;Enumerations&quot;">​</a></h1><p>This page is about the enumerations available in PeyrSharp.Enums. They are grouped by category.</p><h2 id="compatibility" tabindex="-1">Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;Compatibility&quot;">​</a></h2><p>Enumerations are part of the <code>PeyrSharp.Enums</code> module, which is compatible with all of these frameworks and platforms:</p><table><thead><tr><th>Package/Platform</th><th>Windows</th><th>macOS</th><th>Linux + others</th></tr></thead><tbody><tr><td>Enums</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td><strong>Framework</strong></td><td><strong>.NET 5</strong></td><td><strong>.NET 6</strong></td><td><strong>.NET 7</strong></td></tr><tr><td>Enums</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table><h2 id="converters" tabindex="-1">Converters <a class="header-anchor" href="#converters" aria-label="Permalink to &quot;Converters&quot;">​</a></h2><h3 id="storageunits" tabindex="-1">StorageUnits <a class="header-anchor" href="#storageunits" aria-label="Permalink to &quot;StorageUnits&quot;">​</a></h3><h4 id="definition" tabindex="-1">Definition <a class="header-anchor" href="#definition" aria-label="Permalink to &quot;Definition&quot;">​</a></h4><p>The <code>StorageUnits</code> enumeration represents all possible numeric storage units. It contains the following values:</p><table><thead><tr><th>Value</th><th>Name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td><code>Byte</code></td><td>The byte unit. (b)</td></tr><tr><td>1</td><td><code>Kilobyte</code></td><td>The kilobyte unit. (kb)</td></tr><tr><td>2</td><td><code>Megabyte</code></td><td>The megabyte unit. (mb)</td></tr><tr><td>3</td><td><code>Gigabyte</code></td><td>The gigabyte unit. (gb)</td></tr><tr><td>4</td><td><code>Terabyte</code></td><td>The terabyte unit. (tb)</td></tr><tr><td>5</td><td><code>Petabyte</code></td><td>The petabyte unit. (pb)</td></tr></tbody></table><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ToPetabyte</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">StorageUnits</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unit</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (unit </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> StorageUnits.Terabyte)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000d</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ToPetabyte</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">StorageUnits</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unit</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (unit </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> StorageUnits.Terabyte)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000d</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="timeunits" tabindex="-1">TimeUnits <a class="header-anchor" href="#timeunits" aria-label="Permalink to &quot;TimeUnits&quot;">​</a></h3><h4 id="definition-1" tabindex="-1">Definition <a class="header-anchor" href="#definition-1" aria-label="Permalink to &quot;Definition&quot;">​</a></h4><p>The <code>TimeUnits</code> enumeration represents all possible time units, such as seconds, minutes, etc. A more detailed table on all the values available:</p><table><thead><tr><th>Value</th><th>Name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td><code>Milliseconds</code></td><td>Represents milliseconds.</td></tr><tr><td>1</td><td><code>Seconds</code></td><td>Represents seconds.</td></tr><tr><td>2</td><td><code>Minutes</code></td><td>Represents minutes.</td></tr><tr><td>3</td><td><code>Hours</code></td><td>Represents hours.</td></tr><tr><td>4</td><td><code>Days</code></td><td>Represents days.</td></tr></tbody></table><h4 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ToSeconds</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">TimeUnits</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unit</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (unit </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> TimeUnits.Minutes)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">60</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ToSeconds</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">double</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">TimeUnits</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unit</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (unit </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> TimeUnits.Minutes)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">60</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="environment" tabindex="-1">Environment <a class="header-anchor" href="#environment" aria-label="Permalink to &quot;Environment&quot;">​</a></h2><h3 id="loglevel" tabindex="-1">LogLevel <a class="header-anchor" href="#loglevel" aria-label="Permalink to &quot;LogLevel&quot;">​</a></h3><h4 id="definition-2" tabindex="-1">Definition <a class="header-anchor" href="#definition-2" aria-label="Permalink to &quot;Definition&quot;">​</a></h4><p>The <code>LogLevel</code> enumeration specifies the severity level of a log message. It contains several values:</p><table><thead><tr><th>Value</th><th>Name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td><code>Debug</code></td><td>Debug-level messages provide verbose information for debugging purposes.</td></tr><tr><td>1</td><td><code>Info</code></td><td>Info-level messages provide informational messages about the application&#39;s state.</td></tr><tr><td>2</td><td><code>Warning</code></td><td>Warning-level messages indicate a potential problem or non-critical issue.</td></tr><tr><td>3</td><td><code>Error</code></td><td>Error-level messages indicate an error has occurred in the application.</td></tr><tr><td>4</td><td><code>Critical</code></td><td>Critical-level messages indicate a critical error has occurred that requires immediate attention.</td></tr><tr><td>5</td><td><code>Misc</code></td><td>Misc-level messages are for miscellaneous use cases and are not defined in the logging specification.</td></tr></tbody></table><h4 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PeyrSharp</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Enums</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PeyrSharp</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Env</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">message</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;This is a log message.&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filePath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@&quot;C:\\Logs\\log.txt&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#B392F0;">DateTime</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DateTime.Now;</span></span>
<span class="line"><span style="color:#B392F0;">LogLevel</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">logLevel</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LogLevel.Warning;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Logger.</span><span style="color:#B392F0;">Log</span><span style="color:#E1E4E8;">(message, filePath, date, logLevel);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PeyrSharp</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Enums</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PeyrSharp</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Env</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">message</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;This is a log message.&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">filePath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@&quot;C:\\Logs\\log.txt&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6F42C1;">DateTime</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">date</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DateTime.Now;</span></span>
<span class="line"><span style="color:#6F42C1;">LogLevel</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">logLevel</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LogLevel.Warning;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Logger.</span><span style="color:#6F42C1;">Log</span><span style="color:#24292E;">(message, filePath, date, logLevel);</span></span></code></pre></div><p><a href="/env/logger.html#log-message-filepath-datetime-loglevel">More info here about the example</a></p><h3 id="operatingsystems" tabindex="-1">OperatingSystems <a class="header-anchor" href="#operatingsystems" aria-label="Permalink to &quot;OperatingSystems&quot;">​</a></h3><h4 id="definition-3" tabindex="-1">Definition <a class="header-anchor" href="#definition-3" aria-label="Permalink to &quot;Definition&quot;">​</a></h4><p>The <code>OperatingSystems</code> enumerations represents all possible operating systems that a .NET program could run on. It contains several values:</p><table><thead><tr><th>Value</th><th>Name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td><code>Windows</code></td><td>The Microsoft Windows Operating System.</td></tr><tr><td>1</td><td><code>macOS</code></td><td>The Apple macOS Operating System.</td></tr><tr><td>2</td><td><code>Linux</code></td><td>A Linux-based Operating System.</td></tr><tr><td>3</td><td><code>Unknown</code></td><td>An unknown Operating System.</td></tr></tbody></table><h4 id="example-3" tabindex="-1">Example <a class="header-anchor" href="#example-3" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Env.CurrentOs </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> OperatingSystems.Windows)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">    //Do something if the OS is Windows</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Env.CurrentOs </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> OperatingSystems.Windows)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">    //Do something if the OS is Windows</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="systemthemes" tabindex="-1">SystemThemes <a class="header-anchor" href="#systemthemes" aria-label="Permalink to &quot;SystemThemes&quot;">​</a></h3><h4 id="definition-4" tabindex="-1">Definition <a class="header-anchor" href="#definition-4" aria-label="Permalink to &quot;Definition&quot;">​</a></h4><p>The <code>SystemThemes</code> enumerations represents all themes available on a Windows device. It contains several values:</p><table><thead><tr><th>Value</th><th>Name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td><code>Dark</code></td><td>The user is using dark theme.</td></tr><tr><td>1</td><td><code>Light</code></td><td>The user is using light theme.</td></tr><tr><td>2</td><td><code>Unknown</code></td><td>The current theme is unknown.</td></tr></tbody></table><h4 id="example-4" tabindex="-1">Example <a class="header-anchor" href="#example-4" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">GetCurrentTheme</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> SystemThemes.Dark)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;You have dark theme enabled!&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">GetCurrentTheme</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> SystemThemes.Dark)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;You have dark theme enabled!&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="windowsversion" tabindex="-1">WindowsVersion <a class="header-anchor" href="#windowsversion" aria-label="Permalink to &quot;WindowsVersion&quot;">​</a></h3><h4 id="definition-5" tabindex="-1">Definition <a class="header-anchor" href="#definition-5" aria-label="Permalink to &quot;Definition&quot;">​</a></h4><p>The <code>WindowsVersion</code> enumerations represents all possible Windows versions supported by .NET, which means all version from Windows 7 to 11. It contains several values:</p><table><thead><tr><th>Value</th><th>Name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td><code>Windows7</code></td><td>The Windows 7 (NT 6.1) Operating System.</td></tr><tr><td>1</td><td><code>Windows8</code></td><td>The Windows 8 (NT 6.2) Operating System.</td></tr><tr><td>2</td><td><code>Windows81</code></td><td>The Windows 8.1 (NT 6.3) Operating System.</td></tr><tr><td>3</td><td><code>Windows10</code></td><td>The Windows 10 (NT 10.0) Operating System.</td></tr><tr><td>4</td><td><code>Windows11</code></td><td>The Windows 11 (NT 10.0, Build 22000+) Operating System.</td></tr></tbody></table><h4 id="example-5" tabindex="-1">Example <a class="header-anchor" href="#example-5" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DarkThemeAvailable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Env.CurrentWindowsVersion </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> WindowsVersion.Windows10 </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> Env.CurrentWindowsVersion </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> WindowsVersion.Windows11;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">bool</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DarkThemeAvailable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Env.CurrentWindowsVersion </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> WindowsVersion.Windows10 </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> Env.CurrentWindowsVersion </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> WindowsVersion.Windows11;</span></span></code></pre></div><h2 id="geometry" tabindex="-1">Geometry <a class="header-anchor" href="#geometry" aria-label="Permalink to &quot;Geometry&quot;">​</a></h2><h3 id="trianglesides" tabindex="-1">TriangleSides <a class="header-anchor" href="#trianglesides" aria-label="Permalink to &quot;TriangleSides&quot;">​</a></h3><h4 id="definition-6" tabindex="-1">Definition <a class="header-anchor" href="#definition-6" aria-label="Permalink to &quot;Definition&quot;">​</a></h4><p>The <code>TriangleSides</code> enumeration represents the different sides of a triangle: hypotenuse, adjacent, and opposite. It contains these values:</p><table><thead><tr><th>Value</th><th>Name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td>Opposed</td><td>The opposed side of a specific angle of a triangle.</td></tr><tr><td>1</td><td>Hypotenuse</td><td>The hypotenuse of a triangle.</td></tr><tr><td>2</td><td>Adjacent</td><td>The adjacent side of a specific angle of a triangle.</td></tr></tbody></table><h4 id="example-6" tabindex="-1">Example <a class="header-anchor" href="#example-6" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Get the adjacent side from the opposed side of a specific angle.</span></span>
<span class="line"><span style="color:#E1E4E8;">Trigonometry.</span><span style="color:#B392F0;">GetAdjacentSideFrom</span><span style="color:#E1E4E8;">(TriangleSides.Opposed, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Get the adjacent side from the opposed side of a specific angle.</span></span>
<span class="line"><span style="color:#24292E;">Trigonometry.</span><span style="color:#6F42C1;">GetAdjacentSideFrom</span><span style="color:#24292E;">(TriangleSides.Opposed, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="internet" tabindex="-1">Internet <a class="header-anchor" href="#internet" aria-label="Permalink to &quot;Internet&quot;">​</a></h2><h3 id="statuscodes" tabindex="-1">StatusCodes <a class="header-anchor" href="#statuscodes" aria-label="Permalink to &quot;StatusCodes&quot;">​</a></h3><h4 id="definition-7" tabindex="-1">Definition <a class="header-anchor" href="#definition-7" aria-label="Permalink to &quot;Definition&quot;">​</a></h4><p>The <code>StatusCodes</code> enumeration represents the different kinds of status codes returned by a server after a request is made to it. The following status codes are available in this enumeration:</p><table><thead><tr><th>Value</th><th>Name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td><code>Informational</code></td><td>Informational responses (100-199)</td></tr><tr><td>1</td><td><code>Success</code></td><td>Successful responses (200-299)</td></tr><tr><td>2</td><td><code>Redirection</code></td><td>Redirection messages (300-399)</td></tr><tr><td>3</td><td><code>ClientError</code></td><td>Client error responses (400-499)</td></tr><tr><td>4</td><td><code>ServerError</code></td><td>Server error responses (500-599)</td></tr></tbody></table><h4 id="example-7" tabindex="-1">Example <a class="header-anchor" href="#example-7" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">status </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetRequestStatus</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (status)</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatusCodes</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Informational</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;An information status code has been returned.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatusCodes</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Success</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;An successful status code has been returned.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatusCodes</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Redirection</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;An redirection status code has been returned.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatusCodes</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ClientError</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;An client error status code has been returned.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StatusCodes</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">ServerError</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;An server error status code has been returned.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">status </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetRequestStatus</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (status)</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatusCodes</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Informational</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;An information status code has been returned.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatusCodes</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Success</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;An successful status code has been returned.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatusCodes</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Redirection</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;An redirection status code has been returned.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatusCodes</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ClientError</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;An client error status code has been returned.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StatusCodes</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">ServerError</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;An server error status code has been returned.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="password" tabindex="-1">Password <a class="header-anchor" href="#password" aria-label="Permalink to &quot;Password&quot;">​</a></h2><h3 id="passwordpresets" tabindex="-1">PasswordPresets <a class="header-anchor" href="#passwordpresets" aria-label="Permalink to &quot;PasswordPresets&quot;">​</a></h3><h4 id="definition-8" tabindex="-1">Definition <a class="header-anchor" href="#definition-8" aria-label="Permalink to &quot;Definition&quot;">​</a></h4><p>The <code>PasswordPresets</code> enumeration represents all the of the presets available when generating a password using the <code>Password</code> class of <code>PeyrSharp.Core</code>. It has two values:</p><table><thead><tr><th>Value</th><th>Name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td><code>Simple</code></td><td>The Simple preset generates a password with simple characters.</td></tr><tr><td>1</td><td><code>Complex</code></td><td>The Complex preset generates a password with unusual, hard and complex characters.</td></tr></tbody></table><h4 id="example-8" tabindex="-1">Example <a class="header-anchor" href="#example-8" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">password</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Password.</span><span style="color:#B392F0;">GenerateAsync</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, PasswordPresets.Simple); </span><span style="color:#6A737D;">// Generate a simple password</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">password</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Password.</span><span style="color:#6F42C1;">GenerateAsync</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, PasswordPresets.Simple); </span><span style="color:#6A737D;">// Generate a simple password</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="passwordstrength" tabindex="-1">PasswordStrength <a class="header-anchor" href="#passwordstrength" aria-label="Permalink to &quot;PasswordStrength&quot;">​</a></h3><h4 id="definition-9" tabindex="-1">Definition <a class="header-anchor" href="#definition-9" aria-label="Permalink to &quot;Definition&quot;">​</a></h4><p>The <code>PasswordStrength</code> enumeration represents different strength levels of a password; if it&#39;s a strong or weak password. It contains these values:</p><table><thead><tr><th>Value</th><th>Name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td><code>Low</code></td><td>The password has a low strength; you shouldn&#39;t use it.</td></tr><tr><td>1</td><td><code>Medium</code></td><td>The password has a medium strength; don&#39;t use it on important websites.</td></tr><tr><td>2</td><td><code>Good</code></td><td>The password has a good strength; you can safely use it.</td></tr><tr><td>3</td><td><code>VeryGood</code></td><td>The password has an excellent strength, meaning it will be hard for hackers to hack it.</td></tr></tbody></table><h4 id="example-9" tabindex="-1">Example <a class="header-anchor" href="#example-9" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">internal</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Main</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // Check if the generated password is complex</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Password.</span><span style="color:#B392F0;">GetStrength</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> Password.</span><span style="color:#B392F0;">GenerateAsync</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, PasswordPresets.Complex)) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> PasswordStrength.Medium)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Console.</span><span style="color:#B392F0;">WriteLine</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The password isn&#39;t complex enough.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">internal</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Main</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#6A737D;">    // Check if the generated password is complex</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (Password.</span><span style="color:#6F42C1;">GetStrength</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> Password.</span><span style="color:#6F42C1;">GenerateAsync</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">15</span><span style="color:#24292E;">, PasswordPresets.Complex)) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> PasswordStrength.Medium)</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        Console.</span><span style="color:#6F42C1;">WriteLine</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The password isn&#39;t complex enough.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="userinterface" tabindex="-1">UserInterface <a class="header-anchor" href="#userinterface" aria-label="Permalink to &quot;UserInterface&quot;">​</a></h2><h3 id="controlalignment" tabindex="-1">ControlAlignment <a class="header-anchor" href="#controlalignment" aria-label="Permalink to &quot;ControlAlignment&quot;">​</a></h3><h4 id="definition-10" tabindex="-1">Definition <a class="header-anchor" href="#definition-10" aria-label="Permalink to &quot;Definition&quot;">​</a></h4><p>The <code>ControlAlignment</code> enumeration is here to help align a control when calling methods from the <code>UiHelpers</code> namespace. It has the following values:</p><table><thead><tr><th>Value</th><th>Name</th><th>Meaning</th></tr></thead><tbody><tr><td>0</td><td><code>Horizontal</code></td><td>The control will be aligned/centered horizontally.</td></tr><tr><td>1</td><td><code>Vertical</code></td><td>The control will be aligned/centered vertically.</td></tr><tr><td>2</td><td><code>Both</code></td><td>The control will be aligned/centered horizontally and vertically.</td></tr></tbody></table><h4 id="example-10" tabindex="-1">Example <a class="header-anchor" href="#example-10" aria-label="Permalink to &quot;Example&quot;">​</a></h4><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PeyrSharp</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">UiHelpers</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">partial</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyForm</span><span style="color:#E1E4E8;"> : </span><span style="color:#B392F0;">Form</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">button1_Click</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">object</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sender</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">EventArgs</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">e</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            WinFormsHelpers.</span><span style="color:#B392F0;">CenterControl</span><span style="color:#E1E4E8;">(button1, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, ControlAlignment.Horizontal);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">using</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PeyrSharp</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">UiHelpers</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">namespace</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">partial</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyForm</span><span style="color:#24292E;"> : </span><span style="color:#6F42C1;">Form</span></span>
<span class="line"><span style="color:#24292E;">    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">button1_Click</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">object</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sender</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">EventArgs</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">e</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">            WinFormsHelpers.</span><span style="color:#6F42C1;">CenterControl</span><span style="color:#24292E;">(button1, </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, ControlAlignment.Horizontal);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,78),t=[l];function p(r,c,i,d,E,y){return a(),n("div",null,t)}const m=s(o,[["render",p]]);export{u as __pageData,m as default};
